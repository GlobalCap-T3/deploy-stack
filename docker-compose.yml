version: "3.9"

services:

  frontend-service:
    image: frontend-service:0.1.0
    container_name: frontend-service
    build:
      context: ./frontend-service
    ports:
      - 3000:3000
    networks:
      - frontend
    volumes:
      - ./frontend-service/src:/opt/src
    restart: unless-stopped

  authentication-service:
    image: authentication-service:0.1.0
    container_name: authentication-service
    build:
      context: ./authentication-service
    ports:
      - 5000:5000
    networks:
      - backend
      - frontend
    volumes:
      - ./authentication-service/app:/opt/app
      - ./authentication-service/config:/opt/config
    environment:
      SERVICE_ENV: ${SERVICE_ENV:-dev}
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-development}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  discussion-service:
    image: discussion-service:0.1.0
    container_name: discussion-service
    build:
      context: ./discussion-service
    ports:
      - 5030:5030
    networks:
      - backend
      - frontend
    volumes:
      - ./discussion-service/app:/opt/app
      - ./discussion-service/config:/opt/config
    environment:
      SERVICE_ENV: ${SERVICE_ENV:-dev}
      ELASTIC_HOST: elasticsearch
      ELASTIC_PORT: 9200
      AUTHEN_HOST: authentication-service
      AUTHEN_PORT: 5000
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  postgres:
    image: postgres:15.1
    container_name: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-development}"]
    ports:
      - 5432:5432
    networks:
      - backend
    volumes:
      - postgresdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-development}
      POSTGRES_HOST_AUTH_METHOD: trust
    restart: unless-stopped

  elasticsearch:
    image: elasticsearch:8.5.2
    container_name: elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
    ports:
      - 9200:9200
    networks:
      - backend
    volumes:
      - elasticsearchdata:/usr/share/elasticsearch/data
    environment:
      discovery.type: single-node
      xpack.security.enabled: "false"
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: unless-stopped

  kibana:
    image: kibana:8.5.2
    container_name: kibana
    ports:
      - 5601:5601
    networks:
      - backend
    volumes:
      - kibanadata:/usr/share/kibana/data
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

networks:
  backend: {}
  frontend: {}

volumes:
  postgresdata:
    driver: local
  elasticsearchdata:
    driver: local
  kibanadata:
    driver: local